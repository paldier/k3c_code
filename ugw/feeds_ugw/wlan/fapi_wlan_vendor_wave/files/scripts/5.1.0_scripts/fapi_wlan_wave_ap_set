#!/bin/sh
# Configure AccessPoint parameters
# Needed object: AccessPoint, AccessPoint.X_LANTIQ_COM_Vendor

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh

interface_name=$1
pid=$$

# Find the interface index and the radio index
interface_index=`find_index_from_interface_name $interface_name`
radio_name=${interface_name%%.*}
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index $radio_index "$script_name:begin"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${CONF_DIR}/ap_set_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
access_point_index=`map_param_index Object $ACCESSPOINT_OBJECT`
access_point_vendor_index=`map_param_index Object $ACCESSPOINT_VENDOR_OBJECT`

# Save the input configuration parameters to a local DB used by Wave FAPI
[ -n "$access_point_index" ] && save_db_params ap_set $interface_name $access_point_index $interface_index
[ -n "$access_point_vendor_index" ] && save_db_params ap_set $interface_name $access_point_vendor_index $interface_index
# Source RADIO and ACCESSPOINT DBs
local_db_source RADIO
local_db_source ACCESSPOINT

[ -e /etc/rc.d/config.sh ] && . /etc/rc.d/config.sh

comment="___AccessPoint_parameters___###"

# Define list of AccessPoint parameters
driver_params="sAPforwarding
AP_ISO
sReliableMcast
sIpxPpaEnabled
sBridgeMode
sPeerAPkeyIdx
key
sEnableAMSDU"

hostapd_params="ignore_broadcast_ssid
ap_isolate
dtim_period
ap_max_inactivity
max_num_sta
num_res_sta
opmode_notif
qos_map_set
wmm_enabled
uapsd_advertisement_enabled
proxy_arp
macaddr_acl
accept_mac_file
deny_mac_file"

# Update the status file with the interface status
update_enable_disable $radio_name $interface_name $interface_index

# Prepare the temporary configuration files to use
prepare_confs $interface_name $radio_name $pid $VAP
# Get the pid to use in this configuration session
. ${CONF_IN_PROGRESS}_${radio_name}

# Read current values and initiate new values file.
driver_current_values=${CONF_DIR}/driver_current_values_${interface_name}
hostapd_current_values=${CONF_DIR}/hostapd_current_values_${interface_name}_${pid}

read_current_values $HOSTAPD_VAP_CONF_PREFIX $interface_name $hostapd_current_values
read_current_values $DRIVER_POST_UP_CONF_PREFIX $interface_name $driver_current_values

# Calculate new values.
# Some commands are executed according to the fastpath state
fastpath_enabled=`db2fapi_convert boolean WaveFastpathEnabled $radio_index`

### 802.11 parameters
AP_ISO=""

ignore_broadcast_ssid=`convert_ignore_broadcast_ssid $interface_index`
ap_isolate=`db2fapi_convert boolean IsolationEnable $interface_index`
# When ap_isolate is enabled, sAPforwarding is disabled and vice versa
sAPforwarding=$((ap_isolate^1))
# Add hs_cli AP_ISO command to set ap isolation if fastpath is enabled
[ "$fastpath_enabled" = "1" ] && AP_ISO=`convert_ap_iso $ap_isolate`
dtim_period=`db2fapi_convert regular DTIMPeriod $radio_index`

### Station inactivity parameters
ap_max_inactivity=`db2fapi_convert regular APMaxInactivity $interface_index`

### VAP limits
max_num_sta=`db2fapi_convert regular MaxAssociatedDevices $interface_index`
num_res_sta=`db2fapi_convert regular ReservedAssociatedDevices $interface_index`

### 11ac parameters
opmode_notif=`convert_opmode_notif $radio_index`

### Multicast parameters
sReliableMcast=`db2fapi_convert boolean ReliableMuticastEnable $interface_index`

### PPA parameters
# Configure PPA only if PPA exists by checking if ${SBINDIR}/ppacmd exists
sIpxPpaEnabled=""
# sIpxPpaEnabled is set on interfaces that are not fastpath enabled
[ "$fastpath_enabled" != "1" ] && [ -e "${SBINDIR}/ppacmd" ] && sIpxPpaEnabled=`db2fapi_convert boolean PPAEnable $interface_index`
# For grx750_haven_park, PPA will be always enabled
[ "$CONFIG_BUILD_SUFFIX" = "haven_park_rt_he_ethwan_71" ] && sIpxPpaEnabled=1
proxy_arp=`db2fapi_convert boolean ProxyArp $interface_index`

### QOS map parameter
qos_map_set=""
qos_map_set=`db2fapi_convert regular QosMap $interface_index`

## WMM parameters
wmm_enabled=`db2fapi_convert boolean WMMEnable $interface_index`
uapsd_advertisement_enabled=`db2fapi_convert boolean UAPSDEnable $interface_index`

### WDS parameters
sBridgeMode=`db2fapi_convert boolean WaveWDSEnabled $interface_index`
# Configure WDS parameters only if WDS is enabled
if [ "$sBridgeMode" = "1" ]
then
	sPeerAPkeyIdx=`convert_peer_ap_key_index $interface_index`
	# Configure the wep keys if wep is set
	[ $sPeerAPkeyIdx -gt 0 ] && key=`convert_wds_wep_keys $interface_index`
	# Get the list of peer APs in driver and in the DB
	driver_peer_aps=`get_wds_driver_peer_list $interface_name`
	db_peer_aps=`get_wds_db_peer_list $interface_index`
fi

### ACL parameters
acl_db=`db2fapi_convert regular MACAddressControlMode $interface_index`
macaddr_acl=`convert_macaddr_acl $acl_db`
accept_mac_file=""
deny_mac_file=""

# If ACL is enabled in DB (Allow or Deny), set ACL files parameters
if [ "$acl_db" != "Disabled" ]
then
	accept_mac_file="${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf"
	deny_mac_file="${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf"
	touch ${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf
	touch ${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf
fi

### AMSDU
sEnableAMSDU=`db2fapi_convert boolean WaveAmsduEnabled $interface_index`

# Write the parameters to the configuration files.
# Check if a hostapd parameter was changed.
hostapd_changed=`check_param_changed "$hostapd_params"`

# If a hostapd parameter was changed, remove AccessPoint parameters from hostapd_vap temp conf file and write all of them with updated values.
if [ "$hostapd_changed" ]
then
	hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
	# Remove the hostapd AccessPoint parameters.
	remove_params_from_conf "###$comment $hostapd_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX

	# Write the hostapd AccessPoint parameters.
	set_conf_param hostapd_vap comment otf $pid $interface_name comment "$comment"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name ignore_broadcast_ssid "$ignore_broadcast_ssid"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name ap_isolate "$ap_isolate"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name dtim_period "$dtim_period"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name ap_max_inactivity "$ap_max_inactivity"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name max_num_sta "$max_num_sta"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name num_res_sta "$num_res_sta"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name opmode_notif "$opmode_notif"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name qos_map_set "$qos_map_set"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name wmm_enabled "$wmm_enabled"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name uapsd_advertisement_enabled "$uapsd_advertisement_enabled"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name proxy_arp "$proxy_arp"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name macaddr_acl "$macaddr_acl"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name accept_mac_file "$accept_mac_file"
	set_conf_param hostapd_vap regular no_otf $pid $interface_name deny_mac_file "$deny_mac_file"
fi

# Check if a driver parameter was changed.
driver_changed=`check_param_changed "$driver_params"`

# Check if WDS peer APs list was changed.
peers_changed=`check_wds_peer_list_changed "$driver_peer_aps" "$db_peer_aps"`

# If a driver parameter was changed, remove AccessPoint parameters from drv_config_post_up temp conf file and write all of them with updated values.
if [ "$driver_changed" -o "$peers_changed" ]
then
	drv_config_post_up_conf_name=${CONF_DIR}/drv_config_post_up_${interface_name}_${pid}.conf
	# Remove the driver AccessPoint and WDS parameters.
	remove_params_from_conf "sAddPeerAP sDelPeerAP $driver_params" $drv_config_post_up_conf_name $DRIVER_POST_UP_CONF_PREFIX

	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sAPforwarding "$sAPforwarding"
	set_conf_param drv_config_post_up hs_cli otf $pid $interface_name AP_ISO "$AP_ISO"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sReliableMcast "$sReliableMcast"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sIpxPpaEnabled "$sIpxPpaEnabled"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sBridgeMode "$sBridgeMode"
	set_conf_param drv_config_post_up iwconfig otf $pid $interface_name key "$key"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sPeerAPkeyIdx "$sPeerAPkeyIdx"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sEnableAMSDU "$sEnableAMSDU"
	# Update the AP peers list
	update_wds_peer_ap_list $interface_name $pid "$driver_peer_aps" "$db_peer_aps"
fi

# If PPA exists, check if the PPA is enabled for this interface and if fastpath is enabled for the radio of this interface.
# If ppa enabled or fastpath is enabled for the radio, write the PPA commands. If both disabled, remove the interface from the PPA.
if [ -e ${SBINDIR}/ppacmd ]
then
	if [ "$sIpxPpaEnabled" = "1" ] || [ "$fastpath_enabled" = "1" ]
	then
		set_conf_param drv_config_post_up ppa otf $pid $interface_name ppacmd "add"
	else
		set_conf_param drv_config_post_up ppa otf $pid $interface_name ppacmd "remove"
	fi
fi

# Update the ACL accept list
# Write the MAC addresses to the deny/accept lists and clear the other list.
case $acl_db in
"Allow")
	update_acl_list ACCEPT $interface_index $pid $interface_name $radio_name
	[ -e "${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf
	;;
"Deny")
	update_acl_list DENY $interface_index $pid $interface_name $radio_name
	[ -e "${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf
	;;
"Disabled")
	update_acl_list DENY $interface_index $pid $interface_name $radio_name empty
	[ -e "${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${ACCEPT_ACL_FILE}.${interface_name}.conf
	[ -e "${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf" ] && cat /dev/null > ${CONF_DIR}/${DENY_ACL_FILE}.${interface_name}.conf
	;;
esac

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# Set maximum number of STAs from driver to XML
value_to_set=`driver_to_db_set_max_num_sta $radio_name $interface_index`
if [ -n "$value_to_set" ]
then
	update_conf_out "Object_${access_point_index}" "${ACCESSPOINT_OBJECT}"
	update_conf_out "MaxAssociatedDevices_${access_point_index}" "$value_to_set"
	# If set, need to remove already configured max_num_sta from hostapd conf...
	clear_hostapd_params $interface_name $pid max_num_sta
	set_conf_param hostapd_vap regular no_otf $pid $interface_name "max_num_sta" "$value_to_set"
fi

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/ap_set_out_conf_${interface_name}

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:done"
