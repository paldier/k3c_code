#!/bin/sh
# Return the Radio capabilities
# Needed object: None or Radio and/or Radio.Vendor with partial list of parameters

script_name="$0"

if [ ! "$LIB_COMMON_SOURCED" ]
then
	if [ -e /tmp/fapi_wlan_wave_lib_common.sh ]
	then
		. /tmp/fapi_wlan_wave_lib_common.sh
	else
		# If this script is called by the web before wireless init occurs, ${WAVE_TMP}/fapi_wlan_wave_lib_common.sh will be missing.
		# In this case notify the web that it must refresh its values
		echo $script_name: Wireless init incomplete. Refresh needed. > /dev/console
		exit
	fi
fi

interface_name=$1

# Find the radio index
radio_name=${interface_name%%.*}
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:begin"

# If interface name is not supplied, exit script
[ -z "$interface_name" ] && print2log $radio_index ALERT "$script_name: interface_name is missing. exit execution" && exit 1

# Verify interface is up and ready. If not, exit
[ `check_interface_is_ready $interface_name` = "1" ] && exit

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${CONF_DIR}/capability_in_conf_${interface_name}

# Map the object index to the received object in the in.conf file
radio_index=`map_param_index Object $RADIO_OBJECT`
radio_vendor_index=`map_param_index Object $RADIO_VENDOR_OBJECT`

# If an object that needs to be in the output conf wasn't in the input conf, set it with an index
next_object_index=`get_next_object_index`
[ -z "$radio_index" ] && radio_index=$next_object_index && next_object_index=$((next_object_index+1))
[ -z "$radio_vendor_index" ] && radio_vendor_index=$next_object_index && next_object_index=$((next_object_index+1))

# Read iw info for the interface to a file and remove tabs and asterisks
# Get the phy name in iw for the interface
phy_name=`find_phy_from_interface_name $interface_name`
iw $phy_name info > ${CONF_DIR}/iw_info_${phy_name}
sed -i -e 's/\t//g' -e 's/\* //' ${CONF_DIR}/iw_info_${phy_name}

# Functions to read the capabilities from the iw output

# Supported frequency bands and standards (network modes)
supported_frequency_bands_capability()
{
	supported_frequency_bands=`get_supported_frequencies ${CONF_DIR}/iw_info_${phy_name}`
}

# Supported standards (network modes)
supported_standards_capability()
{
	[ -z "$supported_frequency_bands" ] && supported_frequency_bands_capability
	case $supported_frequency_bands in
		"2.4GHz")
			supported_standards="b,g,n"
			;;
		"5GHz")
			supported_standards="a,n,ac"
			;;
		"2.4GHz,5GHz")
			supported_standards="b,g,a,n,ac"
			;;
	esac
}

possible_channels_capability()
{
	iwlist $interface_name ch > ${CONF_DIR}/iwlist_${interface_name}
	possible_channels=""
	while read param1 param2 param3
	do
		if [ "$param1" = "Channel" ]
		then
			param2=${param2#0}
			possible_channels="${possible_channels},${param2}"
		fi
	done < ${CONF_DIR}/iwlist_${interface_name}
	possible_channels=${possible_channels#,}
	rm -f ${CONF_DIR}/iwlist_${interface_name}
}
# Maximum bit rate in Mbps
# Setting max_bit_rate according to the following:
# Internal Wlan - 300
# Wave500 PCIe 2.4GHz 3x3- 450
# Wave500 PCIe 2.4GHz 4x4- 600
# Wave500 PCIe 5GHz 3x3 - 1300
# Wave500 PCIe 5GHz 4x4 - 1733
max_bit_rate_capability()
{
	max_bit_rate="300"

	# Check number of antennas
	num_antennas=`grep "Available Antennas" ${CONF_DIR}/iw_info_${phy_name}`
	num_antennas=${num_antennas##*TX 0x}
	num_antennas=${num_antennas:0:1}
	[ -z "$supported_frequency_bands" ] && supported_frequency_bands_capability
	case $supported_frequency_bands in
		"2.4GHz")
			[ ! -e ${CONF_DIR}/fapi_wlan_wave_discover.txt ] && (. $ETC_PATH/fapi_wlan_wave_discover.sh)
			. ${CONF_DIR}/fapi_wlan_wave_discover.txt
			if [ "$AHB_WLAN_COUNT" = "0" ] || [ "$interface_name" != "wlan0" ]
			then
				max_bit_rate=450
				[ "$num_antennas" = "4" ] && max_bit_rate=600
			fi
			;;
		"5GHz"|"2.4GHz,5GHz")
			max_bit_rate=1300
			[ "$num_antennas" = "4" ] && max_bit_rate=1733
			;;

	esac
}

# The channel the AP uses
channel_capability()
{
	channel=`iwlist $interface_name ch`
	channel=${channel##*Current Channel=}
	i=0
	while [ $channel = 0 ] && [ $i -lt 20 ]
	do
		channel=`iwlist $interface_name ch`
		channel=${channel##*Current Channel=}
		sleep 1
		i=$((i+1))
	done
}

# Channels in use.
# Shows the channel used by the AP and by other APs around it.
channels_in_use_capability()
{
	[ -z "$channel" ] && channel_capability
	channels_in_use="$channel"

	eval used_${channel}=yes

	# Read the channels in use from the driver's last scan results and save it to a file.
	# Last scan results can be retrieved from a file saved after last scan or using the iw call
	if [ ! -e ${CONF_DIR}/${interface_name}_scan_MAPI.result ]
	then
		# Get scan results of last scan (may be empty if the linux kernel cleaned the scan results)
		iw dev $interface_name scan dump > ${CONF_DIR}/${interface_name}_scan.dump
		# Parse the scan results to a MAPI format and source the output file
		cat ${CONF_DIR}/${interface_name}_scan.dump | awk -v output="MAPI" -f ${ETC_PATH}/fapi_wlan_wave_ap_scan_parse.awk > ${CONF_DIR}/${interface_name}_scan_MAPI.result
		rm -f ${CONF_DIR}/${interface_name}_scan.dump
		# Remove ssid results from output file to avoid special characters
		sed -i '/^ssid/d' ${CONF_DIR}/${interface_name}_scan_MAPI.result
	fi
	. ${CONF_DIR}/${interface_name}_scan_MAPI.result
	# Go over the scan results and if a channel is in use, add it to the list if it is not already in it.
	i=0
	while [ $i -lt $ap_scan_count ]
	do
		eval ch=\${channel_${i}}
		eval used=\${used_${ch}}
		[ -z $used ] && channels_in_use="$channels_in_use,$ch" && eval used_${ch}=yes
		i=$((i+1))
	done
}

# Auto channel supported
auto_channel_supported_capability()
{
	auto_channel_supported="true"
}

# Supported transmit power levels
transmit_power_supported_capability()
{
	transmit_power_supported="12,25,50,100"
}

# Supported number of antennas
num_antennas_supported_capability()
{
	num_antennas=`grep "Available Antennas" ${CONF_DIR}/iw_info_${phy_name}`
	num_antennas=${num_antennas##*TX 0x}
	num_antennas=${num_antennas:0:1}
	[ "$num_antennas" = "4" ] && num_antennas_supported="1,2,3,4"
	[ "$num_antennas" = "3" ] && num_antennas_supported="1,2,3"
	[ "$num_antennas" = "2" ] && num_antennas_supported="1,2"
	[ "$num_antennas" = "1" ] && num_antennas_supported="1"
}

# 802.11h supported (only when 5Ghz frequency is supported)
ieee80211h_supported_capability()
{
	ieee80211h_supported="false"
	[ "$supported_frequency_bands" != "2.4GHz" ] && ieee80211h_supported="true"
}

# Maximum number of VAPs that can be created in this radio
max_num_vaps_capability()
{
	max_num_vaps=`iwpriv $interface_name gAPCapsMaxVAPs`
	max_num_vaps=${max_num_vaps##w*:}
}

# Create the output configuration file and set the capabilities in it
cat /dev/null > ${OUT_CONF}

# Return only the requested capabilities
# If conf input is empty, return all capabilities
if [ `wc -c < ${IN_CONF}` = "0" ]
then
	# Radio object parameters
	update_conf_out "Object_${radio_index}" "$RADIO_OBJECT"
	max_bit_rate_capability
	update_conf_out "MaxBitRate_${radio_index}" "$max_bit_rate"
	supported_frequency_bands_capability
	update_conf_out "SupportedFrequencyBands_${radio_index}" "$supported_frequency_bands"
	supported_standards_capability
	update_conf_out "SupportedStandards_${radio_index}" "$supported_standards"
	possible_channels_capability
	update_conf_out "PossibleChannels_${radio_index}" "$possible_channels"
	channels_in_use_capability
	update_conf_out "ChannelsInUse_${radio_index}" "$channels_in_use"
	auto_channel_supported_capability
	update_conf_out "AutoChannelSupported_${radio_index}" "$auto_channel_supported"
	transmit_power_supported_capability
	update_conf_out "TransmitPowerSupported_${radio_index}" "$transmit_power_supported"
	ieee80211h_supported_capability
	update_conf_out "IEEE80211hSupported_${radio_index}" "$ieee80211h_supported"
	channel_capability
	update_conf_out "Channel_${radio_index}" "$channel"
	# Radio.X_LANTIQ_COM_Vendor object parameters
	update_conf_out "Object_${radio_vendor_index}" "$RADIO_VENDOR_OBJECT"
	max_num_vaps_capability
	update_conf_out "MaxNumVaps_${radio_vendor_index}" "$max_num_vaps"
	num_antennas_supported_capability
	update_conf_out "NumOfAntennasSupported_${radio_vendor_index}" "$num_antennas_supported"
fi

while read capability
do
	capab_name=${capability%%_*}
	case $capab_name in
		"Object")
			object_index=${capability##*_}
			object_index=${object_index%%=*}
			object_name=${capability##*=}
			update_conf_out "Object_${object_index}" "$object_name"
			;;
		"MaxBitRate")
			max_bit_rate_capability
			update_conf_out "MaxBitRate_${object_index}" "$max_bit_rate"
			;;
		"SupportedFrequencyBands")
			supported_frequency_bands_capability
			update_conf_out "SupportedFrequencyBands_${object_index}" "$supported_frequency_bands"
			;;
		"SupportedStandards")
			supported_standards_capability
			update_conf_out "SupportedStandards_${object_index}" "$supported_standards"
			;;
		"PossibleChannels")
			possible_channels_capability
			update_conf_out "PossibleChannels_${object_index}" "$possible_channels"
			;;
		"ChannelsInUse")
			channels_in_use_capability
			update_conf_out "ChannelsInUse_${object_index}" "$channels_in_use"
			;;
		"AutoChannelSupported")
			auto_channel_supported_capability
			update_conf_out "AutoChannelSupported_${object_index}" "$auto_channel_supported"
			;;
		"TransmitPowerSupported")
			transmit_power_supported_capability
			update_conf_out "TransmitPowerSupported_${object_index}" "$transmit_power_supported"
			;;
		"IEEE80211hSupported")
			ieee80211h_supported_capability
			update_conf_out "IEEE80211hSupported_${object_index}" "$ieee80211h_supported"
			;;
		"Channel")
			channel_capability
			update_conf_out "Channel_${object_index}" "$channel"
			;;
		"MaxNumVaps")
			max_num_vaps_capability
			update_conf_out "MaxNumVaps_${object_index}" "$max_num_vaps"
			;;
		"NumOfAntennasSupported")
			num_antennas_supported_capability
			update_conf_out "NumOfAntennasSupported_${radio_vendor_index}" "$num_antennas_supported"
			;;
		esac
done < ${IN_CONF}

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/capability_out_conf_${interface_name}

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:done"
