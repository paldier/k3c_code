#!/bin/sh
# Configure Radio parameters
# Needed objects: Radio, Radio.X_LANTIQ_COM_Vendor

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh

interface_name=$1
pid=$$

# Find the interface index
interface_index=`find_index_from_interface_name $interface_name`

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${CONF_DIR}/radio_set_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
radio_index=`map_param_index Object $RADIO_OBJECT`
radio_vendor_index=`map_param_index Object $RADIO_VENDOR_OBJECT`

# Save the input configuration parameters to a local DB used by Wave FAPI
[ -n "$radio_vendor_index" ] && save_db_params radio_set $interface_name $radio_vendor_index $interface_index
[ -n "$radio_index" ] && save_db_params radio_set $interface_name $radio_index $interface_index
local_db_source RADIO

print2log $interface_index DEBUG "$script_name $*"
timestamp $interface_index "$script_name:begin"

comment="___Radio_parameters___###"

# Define list of radio parameters
driver_params="sBeaconPeriod
sDTIMPeriod
sShortRetryLim
sLongRetryLimit
sMSDULifetime
sPowerSelection
s11nProtection
sCoCAutoCfg
sAlgoCalibrMask
sOnlineACM
driver_debug
sScanParams
sScanParamsBG
sScanModifFlags
sScanCalCwMasks
sFWRecovery
sQAMplus
sNumMsduInAmsdu
sScanExpTime"

driver_otf_params="sCoCPower
sEnableRadio
sPCoCPower
sPCoCAutoCfg
sDoSimpleCLI
sRadarRssiTh"

hostapd_params="country_code
hw_mode
ieee80211d
channel
preamble
beacon_int
rts_threshold
ieee80211n
ht_capab
ht_tx_bf_capab
ht_rifs
ieee80211h
ieee80211ac
vht_oper_chwidth
vht_capab
vht_oper_centr_freq_seg0_idx
ap_max_num_sta
acs_num_scans
obss_interval
scan_passive_dwell
scan_active_dwell
scan_passive_total_per_channel
scan_active_total_per_channel
channel_transition_delay_factor
scan_activity_threshold
obss_beacon_rssi_threshold
acs_numbss_info_file
acs_numbss_coeflist
dfs_debug_chan
chanlist
assoc_rsp_rx_mcs_mask
ignore_40_mhz_intolerant"

drvhlpr_params="Debug_SoftwareWatchdogEnable
Interface
arp_iface0
arp_iface1
recovery_script_path"

Interface=$interface_name
recovery_script_path="${ETC_PATH}/wave_wlan_fw_recovery_notify"

# Prepare the temporary configuration files to use
prepare_confs $interface_name $interface_name $pid $AP
# Get the pid to use in this configuration session
. ${CONF_IN_PROGRESS}_${interface_name}

# Read current values and initiate new values file.
driver_current_values=${CONF_DIR}/driver_current_values_${interface_name}
driver_new_values=${CONF_DIR}/driver_new_values_${interface_name}_${pid}
hostapd_current_values=${CONF_DIR}/hostapd_current_values_${interface_name}_${pid}
drvhlpr_current_values=${CONF_DIR}/drvhlpr_current_values_${interface_name}_${pid}

[ -e "$driver_current_values" ] && . $driver_current_values
touch $driver_new_values
read_current_values $HOSTAPD_PHY_CONF_PREFIX $interface_name $hostapd_current_values
read_current_values drvhlpr $interface_name $drvhlpr_current_values
read_current_values $DRIVER_POST_UP_CONF_PREFIX $interface_name $driver_current_values

# Calculate new values.
# Read the frequency value, as some features are for 2.4Ghz or 5Ghz only.
frequency_band=`db2fapi_convert regular OperatingFrequencyBand $interface_index`

# Read the network mode value, as some parameters depend on this value
network_mode=`db2fapi_convert regular OperatingStandards $interface_index`

# Read if auto coc is enabled, as some parameters depend on this value
auto_coc_enabled=`db2fapi_convert boolean AutoCocEnabled $interface_index`

# Read the number of antennas value, as some parameters depend on this value
num_antennas=`db2fapi_convert regular NumOfAntennas $interface_index`

### 802.11 parameters
# Enable/disable the phy radio
sEnableRadio=`db2fapi_convert boolean Enable $interface_index`

# In hostapd, hw_mode with ieee80211n and ieee80211ac define the network mode:
# Network mode   hw_mode   ieee80211n   ieee80211ac
# 11b only          b         0            0
# 11bg              g         0            0
# 11bgn             g         1            0
# 11a only          a         0            0
# 11an              a         1            0
# 11anac            a         1            1
# Other network modes are currently not supported.
hw_mode=`convert_hw_mode $frequency_band $network_mode`

# Beacon interval and DTIM period are set both in driver and hostapd (dtim is set as "main" parameter).
preamble=`convert_preamble $interface_index`
beacon_int=`db2fapi_convert regular BeaconPeriod $interface_index`
sBeaconPeriod=$beacon_int
sDTIMPeriod=`db2fapi_convert regular DTIMPeriod $interface_index`
# Currently, value is hardcoded in the FW
#rts_threshold=`db2fapi_convert regular RTSThreshold $interface_index`
rts_threshold=""
country_code=`db2fapi_convert regular RegulatoryDomain $interface_index`
ieee80211d=`db2fapi_convert boolean Dot11dEnable $interface_index`
# Radar detection is only for 5Ghz band.
[ "$frequency_band" = "5GHz" ] && ieee80211h=`db2fapi_convert boolean IEEE80211hEnabled $interface_index`

# In 6.1.1 but not in 7.1
#sAocsRestrictCh=""
auto_channel=`db2fapi_convert boolean AutoChannelEnable $interface_index`
if [ "$auto_channel" = "1" ]
then
	channel="acs_numbss"
else
	channel=`db2fapi_convert regular Channel $interface_index`
fi
# Currently, value is hardcoded in the FW
#sShortRetryLim=`db2fapi_convert regular RetryLimit $interface_index`
sShortRetryLim=""
# Currently, value is hardcoded in the FW
#sLongRetryLimit=`db2fapi_convert regular LongRetryLimit $interface_index`
sLongRetryLimit=""
# Currently, value is hardcoded in the FW
sMSDULifetime=`db2fapi_convert regular TxRetryLifetime $interface_index`
sMSDULifetime=""
sPowerSelection=""
sPowerSelection=`convert_power_level $interface_index`
s11nProtection=`convert_protection_mode $interface_index`

### 802.11n parameters
# Set 802.11n parameters if HT network mode is set.
ieee80211n=`db2fapi_convert_ieee80211 $network_mode n`
channel_bandwidth=`db2fapi_convert regular OperatingChannelBandwidth $interface_index`
secondary_channel=`convert_extension_channel $interface_index $channel`
ht_capab=""
ht_tx_bf_capab=""
ht_rifs=""

# For HT mode, set HT parameters.
if [ "$ieee80211n" = "1" ]
then
	ht_capab=`convert_ht_capab $interface_index $interface_name $channel_bandwidth $secondary_channel $auto_channel $auto_coc_enabled`
	ht_tx_bf_capab=`convert_ht_tx_bf_capab $interface_index $interface_name $num_antennas`
	ht_rifs=1
	chanlist=`db2fapi_convert regular WaveDot11hAllowedChannels $interface_index`
fi

### 802.11ac parameters
# Set 802.11ac parameters if VHT network mode is set.
ieee80211ac=`db2fapi_convert_ieee80211 $network_mode ac`

vht_oper_chwidth=""
vht_capab=""
vht_oper_centr_freq_seg0_idx=""

# For VHT mode, set VHT parameters.
if [ "$ieee80211ac" = "1" ]
then
	vht_oper_chwidth=0
	if [ "$channel_bandwidth" = "80MHz" ] || [ "$channel_bandwidth" = "Auto" ]
	then
		vht_oper_chwidth=1
	fi
	vht_capab=`convert_vht_capab $interface_index $interface_name`
	vht_oper_centr_freq_seg0_idx=`convert_center_freq $channel $channel_bandwidth $secondary_channel $auto_channel`
fi

### Auto CoC parameters
sCoCPower=`convert_auto_coc $auto_coc_enabled $num_antennas`
sCoCAutoCfg=`convert_coc_auto_config $interface_index`

### Power CoC parameters
sPCoCPower=`db2fapi_convert boolean WavePowerCocEnabled $interface_index`
sPCoCAutoCfg=`convert_power_coc_auto_config $interface_index`

### 20/40 coexistence parameters
# Only for 2.4Ghz.
coex_enable="0"
obss_interval="0"
scan_passive_dwell=""
scan_active_dwell=""
scan_passive_total_per_channel=""
scan_active_total_per_channel=""
channel_transition_delay_factor=""
scan_activity_threshold=""
obss_beacon_rssi_threshold=""

if [ "$frequency_band" = "2.4GHz" ]
then
	# Check if 20/40 coexistence is enabled
	coex_enable=`db2fapi_convert boolean CoexEnabled $interface_index`
	# Set parameters if 20/40 coexistence is enabled
	if [ "$coex_enable" = "1" ]
	then
		obss_interval=`db2fapi_convert regular CoexScanInterval $interface_index`
		scan_passive_dwell=`db2fapi_convert regular CoexPassiveDwell $interface_index`
		scan_active_dwell=`db2fapi_convert regular CoexActiveDwell $interface_index`
		scan_passive_total_per_channel=`db2fapi_convert regular CoexPassivePerCh $interface_index`
		scan_active_total_per_channel=`db2fapi_convert regular CoexActivePerCh $interface_index`
		channel_transition_delay_factor=`db2fapi_convert regular CoexTransDelay $interface_index`
		scan_activity_threshold=`db2fapi_convert regular CoexActivityThreshold $interface_index`
		obss_beacon_rssi_threshold=`db2fapi_convert regular CoexRssiThreshold $interface_index`
	fi
fi

### VAP limits
ap_max_num_sta=`iwpriv $interface_name gAPCapsMaxSTAs`
ap_max_num_sta=${ap_max_num_sta##*:}

### AP scan parameters
acs_num_scans=`db2fapi_convert regular WaveACSnumScans $interface_index`
sScanParams=`convert_scan_params $interface_index`
sScanParamsBG=`convert_bg_scan_params $interface_index`
sScanModifFlags=`db2fapi_convert regular WaveScanModifier $interface_index`
sScanCalCwMasks=`convert_calibration_chan_width_for_scan $interface_index`
sScanExpTime=`db2fapi_convert regular WaveScanExpirationTime $interface_index`

### WAVE specific features parameters
sAlgoCalibrMask=`db2fapi_convert regular WaveOfflineCalibrationMask $interface_index`
sOnlineACM=`db2fapi_convert regular WaveOnlineCalibrationMask $interface_index`
Debug_SoftwareWatchdogEnable=`db2fapi_convert boolean WaveCompleteRecoveryEnabled $interface_index`
Interface=$interface_name
arp_iface0="eth0"
arp_iface1="eth1"
recovery_script_path="$RECOVERY_SCRIPT_PATH"
sFWRecovery=`convert_fw_recovery $interface_index`
sQAMplus=`db2fapi_convert boolean WaveQamPlus $interface_index`
sNumMsduInAmsdu=`convert_num_msdu_in_amsdu $interface_index`
sDoSimpleCLI=`convert_txop_enbale $interface_index`
sRadarRssiTh=""
assoc_rsp_rx_mcs_mask=`db2fapi_convert boolean WaveAssocRespRxMcsMask $interface_index`
ignore_40_mhz_intolerant=""

# Set sRadarRssiTh only for 5GHz
[ "$frequency_band" = "5GHz" ] && sRadarRssiTh=`db2fapi_convert regular WaveRadarDetectRssiThreshold $interface_index`

# ignore_40_mhz_intolerant is set only if auto_channel=0, ieee80211n=1, channel_bandwidth=40MHz, coex_enable=0
if [ "$auto_channel" = "0" ] &&  [ "$ieee80211n" = "1" ] && [ "$channel_bandwidth" != "20MHz" ] && [ "$coex_enable" = "0" ]
then
	ignore_40_mhz_intolerant=`db2fapi_convert boolean WaveIgnore40MhzIntolerant $interface_index`
fi

### Numbss for ACS parameters
acs_numbss_info_file="${CONF_DIR}/acs_numbss_info_${interface_name}.txt"
acs_numbss_coeflist=`db2fapi_convert regular WaveACSNumbssCoef $interface_index`

### Radar simulation debug
dfs_debug_chan=`convert_radar_simulation_debug_channel $interface_index`

# Add the console driver debug level command to the drv_config_pre_up file only for wlan0 to configure the whole system.
driver_debug=`convert_driver_debug_level $interface_index cdebug`

# Write the parameters to the configuration files.
# Update current driver values with new values.
update_driver_params_file "$driver_params" $driver_new_values $driver_current_values

# Check if a hostapd parameter was changed.
hostapd_changed=`check_param_changed "$hostapd_params"`

# Check if a drvhlpr parameter was changed.
drvhlpr_changed=`check_param_changed "$drvhlpr_params"`

# If a hostapd parameter was changed, remove radio parameters from hostapd_phy temp conf file and write all of them with updated values.
if [ "$hostapd_changed" ]
then
	hostapd_phy_conf_name=${CONF_DIR}/hostapd_phy_${interface_name}_${pid}.conf
	# Remove the hostapd radio parameters.
	remove_params_from_conf "###$comment $hostapd_params" $hostapd_phy_conf_name $HOSTAPD_PHY_CONF_PREFIX

	# Write the hostapd radio parameters.
	set_conf_param hostapd_phy comment otf $pid $interface_name comment "$comment"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name country_code "$country_code"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name hw_mode "$hw_mode"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211d "$ieee80211d"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name channel "$channel"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name preamble "$preamble"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name beacon_int "$beacon_int"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name rts_threshold "$rts_threshold"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211n "$ieee80211n"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ht_capab "$ht_capab"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ht_tx_bf_capab "$ht_tx_bf_capab"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ht_rifs "$ht_rifs"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211ac "$ieee80211ac"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name vht_oper_chwidth "$vht_oper_chwidth"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name vht_capab "$vht_capab"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name vht_oper_centr_freq_seg0_idx "$vht_oper_centr_freq_seg0_idx"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ap_max_num_sta "$ap_max_num_sta"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_num_scans "$acs_num_scans"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ieee80211h "$ieee80211h"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name obss_interval "$obss_interval"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_passive_dwell "$scan_passive_dwell"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_active_dwell "$scan_active_dwell"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_passive_total_per_channel "$scan_passive_total_per_channel"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_active_total_per_channel "$scan_active_total_per_channel"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name channel_transition_delay_factor "$channel_transition_delay_factor"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name scan_activity_threshold "$scan_activity_threshold"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name obss_beacon_rssi_threshold "$obss_beacon_rssi_threshold"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_numbss_info_file "$acs_numbss_info_file"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name acs_numbss_coeflist "$acs_numbss_coeflist"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name dfs_debug_chan "$dfs_debug_chan"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name chanlist "$chanlist"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name assoc_rsp_rx_mcs_mask "$assoc_rsp_rx_mcs_mask"
	set_conf_param hostapd_phy regular no_otf $pid $interface_name ignore_40_mhz_intolerant "$ignore_40_mhz_intolerant"
fi

# If a drvhlpr parameter was changed, re-write the drvhlpr conf file.
if [ "$drvhlpr_changed" ]
then
	drvhlpr_conf_name=${CONF_DIR}/drvhlpr_${interface_name}_${pid}.conf
	# Delete the drvhlpr conf file and re-write it.
	rm -f $drvhlpr_conf_name

	set_conf_param drvhlpr regular no_otf $pid $interface_name Debug_SoftwareWatchdogEnable "$Debug_SoftwareWatchdogEnable"
	set_conf_param drvhlpr regular no_otf $pid $interface_name Interface "$Interface"
	set_conf_param drvhlpr regular no_otf $pid $interface_name arp_iface0 "$arp_iface0"
	set_conf_param drvhlpr regular no_otf $pid $interface_name arp_iface1 "$arp_iface1"
	set_conf_param drvhlpr regular no_otf $pid $interface_name recovery_script_path "$recovery_script_path"
fi

# Check if a driver OTF parameter was changed.
driver_changed=`check_param_changed "$driver_otf_params"`

# If a driver OTF parameter was changed, remove radio OTF parameters from drv_config_post_up temp conf file and write all of them with updated values.
if [ "$driver_changed" ]
then
	drv_config_post_up_conf_name=${CONF_DIR}/drv_config_post_up_${interface_name}_${pid}.conf
	# Remove the driver radio OTF parameters.
	remove_params_from_conf "$driver_otf_params" $drv_config_post_up_conf_name $DRIVER_POST_UP_CONF_PREFIX

	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sCoCPower "$sCoCPower"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sEnableRadio "$sEnableRadio"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sPCoCPower "$sPCoCPower"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sPCoCAutoCfg "$sPCoCAutoCfg"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sDoSimpleCLI "$sDoSimpleCLI"
	set_conf_param drv_config_post_up iwpriv otf $pid $interface_name sRadarRssiTh "$sRadarRssiTh"
fi

# Write the driver radio parameters that were changed.
[ "$sBeaconPeriod_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sBeaconPeriod "$sBeaconPeriod"
[ "$sDTIMPeriod_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sDTIMPeriod "$sDTIMPeriod"
#[ "$sAocsRestrictCh_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sAocsRestrictCh "$sAocsRestrictCh"
#[ "$sShortRetryLim_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sShortRetryLim "$sShortRetryLim"
#[ "$sLongRetryLimit_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sLongRetryLimit "$sLongRetryLimit"
#[ "$sMSDULifetime_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sMSDULifetime "$sMSDULifetime"
[ "$sPowerSelection_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sPowerSelection "$sPowerSelection"
[ "$s11nProtection_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name s11nProtection "$s11nProtection"
[ "$sCoCAutoCfg_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sCoCAutoCfg "$sCoCAutoCfg"
[ "$sAlgoCalibrMask_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sAlgoCalibrMask "$sAlgoCalibrMask"
[ "$sOnlineACM_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sOnlineACM "$sOnlineACM"
[ "$driver_debug_changed" ] && set_conf_param drv_config_pre_up proc no_otf $pid $interface_name  "/proc/net/mtlk_log/debug" "$driver_debug"
[ "$sScanParams_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sScanParams "$sScanParams"
[ "$sScanParamsBG_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sScanParamsBG "$sScanParamsBG"
[ "$sScanModifFlags_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sScanModifFlags "$sScanModifFlags"
[ "$sScanCalCwMasks_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sScanCalCwMasks "$sScanCalCwMasks"
[ "$sScanExpTime_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sScanExpTime "$sScanExpTime"
[ "$sFWRecovery_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sFWRecovery "$sFWRecovery"
[ "$sQAMplus_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sQAMplus "$sQAMplus"
[ "$sNumMsduInAmsdu_changed" ] && set_conf_param drv_config_pre_up iwpriv no_otf $pid $interface_name sNumMsduInAmsdu "$sNumMsduInAmsdu"

# If operating standard was changed, set opmode_notif for all VAPs of this radio.
# If mode is ANAC, set value to 1, else set to 0
# Check if OperatingStandards is included in the fapi_wlan_wave_in.conf
if test `grep OperatingStandards_${radio_index} ${IN_CONF}`
then
	opmode_notif="$ieee80211ac"
	if [ -e ${VAPS_LIST}_${interface_name} ]
	then
		while read current_vap
		do
			prepare_confs $current_vap $interface_name $pid $VAP
			set_conf_param hostapd_vap regular no_otf $pid $current_vap "opmode_notif" "$opmode_notif"
		done < ${VAPS_LIST}_${interface_name}
	else
		prepare_confs $interface_name $interface_name $pid $VAP
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "opmode_notif" "$opmode_notif"
	fi
fi

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# Configure the logger streams
(. ${ETC_PATH}/fapi_wlan_wave_set_logger_params.sh $interface_name $interface_index $pid)

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/radio_set_out_conf_${interface_name}

print2log $interface_index DEBUG "$script_name done"
timestamp $interface_index "$script_name:done"
