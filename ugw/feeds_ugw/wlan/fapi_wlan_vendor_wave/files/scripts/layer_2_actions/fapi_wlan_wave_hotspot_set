#!/bin/sh
# Configure AccessPoint.HS20 parameters
# Needed object: AccessPoint.HS20 and any other hotspot object

# Source library script
[ ! "$FAPI_WLAN_WAVE_INIT_PLATFORM" ] && . /tmp/wlan_wave/fapi_wlan_wave_init_platform.sh

print2log DBG "running fapi_wlan_wave_hotspot_set: args: $*"

interface_name=$1

# If interface name is not supplied, exit script
check_input_param "fapi_wlan_wave_hotspot_set" "interface_name" "$interface_name"

timestamp "fapi_wlan_wave_hotspot_set:$interface_name:begin"

# DEBUG: TODO: REMOVE
#cp ${IN_CONF} ${WAVE_TMP}/in_conf_hotspot2

# Map the objects indexes to the received objects in the in.conf file
hs20_index=`map_param_index Object $HS20_OBJECT`

# The list of the hotspot scripts parameters that we configure on the driver configuration file
hotspot_scripts_params="AccessNetType
QosMap
InternetConnectivity
venueGroup
venueType
HESSID
NetAuthType
ThreeGpp
DgafDisabled
AnqpDomainId
OperatingClass
OsuSsid
GasComebackDelay"

# Stop the interface by killing hostapd
(. $ETC_PATH/fapi_wlan_wave_init_hostapd.sh stop $interface_name)

# Configure hotspot driver parameters
[ -n "$hs20_index" ] && configure_driver_params "$interface_name" "$hs20_index" "$hotspot_scripts_params" "${WAVE_TMP}/driver_api_hotspot_params_to_set_${interface_name}"

# Configure hotspot hostapd parameters
[ -n "$hs20_index" ] && (. $ETC_PATH/fapi_wlan_wave_init_hostapd.sh create_config $interface_name $hs20_index "$hostapd_general_scripts_params")

# Read needed parameters for other hotsopt components
hs2_mode=`get_conf_param Hs2Mode $hs20_index $interface_name`
proxy_arp_enabled=`get_conf_param ProxyArp $hs20_index $interface_name`
dgaf_disabled=`get_conf_param DgafDisabled $hs20_index $interface_name`
ap_forwarding_enabled=`get_driver_param APforwarding $interface_name`
l2_fw_enabled=`get_conf_param L2FwEna $hs20_index $interface_name`
wan_metrics_duration=`get_conf_param WanMetricsDuration $hs20_index $interface_name`
wan_port=`get_conf_param WanPort $hs20_index $interface_name`

# Configure other HS2.0 components
if [ "$hs2_mode" != "$HS20_MODE_DISABLED" ] && [ "$proxy_arp_enabled" = "1" ]; then
	(. $ETC_PATH/wave_wifi_parp_ctrl.sh enable $interface_name)
	api_wrapper set iwpriv $interface_name sARPProxy 1
else
	(. $ETC_PATH/wave_wifi_parp_ctrl.sh disable $interface_name)
	api_wrapper set iwpriv $interface_name sARPProxy 0
fi
if [ "$hs2_mode" != "$HS20_MODE_DISABLED" ] && [ "$dgaf_disabled" = "1" ]; then
	(. $ETC_PATH/wave_wifi_dgaf_disable.sh $interface_name 1)
else
	(. $ETC_PATH/wave_wifi_dgaf_disable.sh $interface_name 0)
fi
if [ "$hs2_mode" = "$HS20_MODE_ENABLED" ]; then
	(. $ETC_PATH/wmdctrl.sh set duration $wan_metrics_duration)
	(. $ETC_PATH/wmdctrl.sh set wlan name=$interface_name w_active=1 wans=$wan_port)
	(. $ETC_PATH/wmdctrl.sh enable $interface_name)
else
	(. $ETC_PATH/wmdctrl.sh disable $interface_name)
fi
if [ "$hs2_mode" = "$HS20_MODE_ENABLED" ] && [ "$ap_forwarding_enabled" = "0" ]; then
	(. $ETC_PATH/wave_wifi_hairpin_config.sh enable $interface_name)
elif [ "$ap_forwarding_enabled" = "1" ]; then
	(. $ETC_PATH/wave_wifi_hairpin_config.sh disable $interface_name)
fi
if [ "$l2_fw_enabled" = "1" ]; then
	(. $ETC_PATH/wave_wifi_l2f_ctrl.sh enable $interface_name)
else
	(. $ETC_PATH/wave_wifi_l2f_ctrl.sh disable $interface_name)
fi

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: TODO: REMOVE
#cp ${OUT_CONF} ${WAVE_TMP}/out_conf_hotspot2

print2log DBG "fapi_wlan_wave_hotspot_set: Done"
timestamp "fapi_wlan_wave_hotspot_set:$interface_name:done"
