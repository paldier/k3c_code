#!/bin/sh
# Return the AccessPoint.AssociatedDevice Stats
# Needed objects: None or AccessPoint.AssociatedDevice and/or AccessPoint.AssociatedDevice.Stats with partial list of parameters

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$IN_CONF_SOURCED" ] && in_conf_source

interface_name=$1

# Find the radio index
radio_name=${interface_name%%.*}
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:begin"

# If interface name is not supplied, exit script
[ -z "$interface_name" ] && print2log $radio_index ALERT "$script_name: interface_name is missing. exit execution" && exit 1

# Verify interface is up and ready. If not, exit
[ `check_interface_is_ready $interface_name` = "1" ] && exit

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${CONF_DIR}/assoc_devices_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
accesspoint_index=`map_param_index Object $ACCESSPOINT_OBJECT`
associated_devices_index=`map_param_index Object $ACCESSPOINT_ASSOCIATED_DEVICES_OBJECT`
associated_devices_stats_index=`map_param_index Object $ACCESSPOINT_ASSOCIATED_DEVICES_STATS_OBJECT`

# If an object that needs to be in the output conf wasn't in the input conf, set it with an index
next_object_index=`get_next_object_index`
[ -z "$accesspoint_index" ] && accesspoint_index=$next_object_index && next_object_index=$((next_object_index+1))
[ -z "$associated_devices_index" ] && associated_devices_index=$next_object_index && next_object_index=$((next_object_index+1))
[ -z "$associated_devices_stats_index" ] && associated_devices_stats_index=$next_object_index && next_object_index=$((next_object_index+1))

# Get list of connected devices
macs=`iwlist $interface_name peers | awk '/[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]/ {print $1}'`

# Functions to read the statistics

downlink_rate_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name PeerFlowStatus $mac -f ${BINDIR}/mtdump.mtidlc_PeerFlowStat` && stats_read="yes"
	downlink_rate=${mtdump_output%%: Last transmit rate*}
	downlink_rate=${downlink_rate##*received}
	downlink_rate=`echo $downlink_rate`
	downlink_rate=${downlink_rate/./}
	downlink_rate=$((downlink_rate*100))
	# Downlink minimum value is 1000
	[ $downlink_rate -eq 0 ] && downlink_rate=1000
}

uplink_rate_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name PeerFlowStatus $mac -f ${BINDIR}/mtdump.mtidlc_PeerFlowStat` && stats_read="yes"
	uplink_rate=${mtdump_output%%: Last receive rate*}
	uplink_rate=${uplink_rate##*rate}
	uplink_rate=`echo $uplink_rate`
	uplink_rate=${uplink_rate/./}
	uplink_rate=$((uplink_rate*100))
	# Uplink minimum value is 1000
	[ $uplink_rate -eq 0 ] && uplink_rate=1000
}

signal_strength_stats()
{
	mtdump_output=`mtdump w PeerFlowStatus $mac`
	ants=${mtdump_output#*Short-term RSSI average per antenna}
	signal_strength=`echo $ants | awk '{print $1}'`
	[ $signal_strength -lt -120 ] && signal_strength=-128
	signal_strength2=`echo $ants | awk '{print $4}'`
	[ $signal_strength2 -lt -120 ] && signal_strength2=-128
	signal_strength3=`echo $ants | awk '{print $7}'`
	[ $signal_strength3 -lt -120 ] && signal_strength3=-128
	signal_strength4=`echo $ants | awk '{print $10}'`
	[ $signal_strength4 -lt -120 ] && signal_strength4=-128
}

bytes_sent_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name PeerFlowStatus $mac -f ${BINDIR}/mtdump.mtidlc_PeerFlowStat` && stats_read="yes"
	bytes_sent=${mtdump_output%% : HW Number of bytes sent successfully*}
	bytes_sent=${bytes_sent##*received}
	bytes_sent=`echo $bytes_sent`
}

bytes_received_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name PeerFlowStatus $mac -f ${BINDIR}/mtdump.mtidlc_PeerFlowStat` && stats_read="yes"
	bytes_received=${mtdump_output%% : HW Number of bytes received*}
	bytes_received=${bytes_received##*successfully}
	bytes_received=`echo $bytes_received`
}

packets_sent_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name PeerFlowStatus $mac -f ${BINDIR}/mtdump.mtidlc_PeerFlowStat` && stats_read="yes"
	packets_sent=${mtdump_output%% : HW Number of packets transmitted*}
	packets_sent=${packets_sent##*StationID}
	packets_sent=`echo $packets_sent`
}

packets_received_stats()
{
	# Save driver information into a parameter and extract the statistics if not read yet
	[ -z "$stats_read" ] && mtdump_output=`${BINDIR}/mtdump $interface_name PeerFlowStatus $mac -f ${BINDIR}/mtdump.mtidlc_PeerFlowStat` && stats_read="yes"
	packets_received=${mtdump_output%% : HW Number of packets received*}
	packets_received=${packets_received##*transmitted}
	packets_received=`echo $packets_received`
}

# TODO: how to read the following parameters:
retransmissions_stats()
{
	retransmissions=0
}

errors_sent_stats()
{
	errors_sent=0
}

retrans_count_stats()
{
	retrans_count=0
}

failed_retrans_count_stats()
{
	failed_retrans_count=0
}

retry_count_stats()
{
	retry_count=0
}

multiple_retry_count_stats()
{
	multiple_retry_count=0
}

# Create the output configuration file and set the statistics in it
cat /dev/null > ${OUT_CONF}

# Return only the requested statistics
stats_read=""

# If object is empty, return all statistics
if [ `wc -c < ${IN_CONF}` = "0" ]
then
	update_conf_out "Object_${associated_devices_index}" "$ACCESSPOINT_ASSOCIATED_DEVICES_OBJECT"

	# Go over the list of MACs and do the following:
	# Count MACs
	# Read statistics from mtdump
	# Write associated device's statistics to the ouput conf file

	associated_count=0
	current_associated_devices_index=$associated_devices_index
	current_associated_devices_stats_index=$associated_devices_stats_index

	for mac in $macs
	do
		downlink_rate_stats
		uplink_rate_stats
		signal_strength_stats
		signal_strength_stats
		signal_strength_stats
		signal_strength_stats
		retransmissions_stats
		bytes_sent_stats
		bytes_received_stats
		packets_sent_stats
		packets_received_stats
		errors_sent_stats
		retrans_count_stats
		failed_retrans_count_stats
		retry_count_stats
		multiple_retry_count_stats

		# Write the AssociatedDevice object parameters to the output conf file
		update_conf_out "MACAddress_${current_associated_devices_index}" "$mac"
		update_conf_out "AuthenticationState_${current_associated_devices_index}" "true"
		update_conf_out "LastDataDownlinkRate_${current_associated_devices_index}" "$downlink_rate"
		update_conf_out "LastDataUplinkRate_${current_associated_devices_index}" "$uplink_rate"
		update_conf_out "SignalStrength_${current_associated_devices_index}" "$signal_strength"
		update_conf_out "Retransmissions_${current_associated_devices_index}" "$retransmissions"
		update_conf_out "Active_${current_associated_devices_index}" "true"
		update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength2_${current_associated_devices_index}" "$signal_strength2"
		update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength3_${current_associated_devices_index}" "$signal_strength3"
		update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength4_${current_associated_devices_index}" "$signal_strength4"
		
		# Write the AssociatedDevice.Stats object parameters to the output conf file
		update_conf_out "Object_${current_associated_devices_stats_index}" "$ACCESSPOINT_ASSOCIATED_DEVICES_STATS_OBJECT"
		update_conf_out "BytesSent_${current_associated_devices_stats_index}" "$bytes_sent"
		update_conf_out "BytesReceived_${current_associated_devices_stats_index}" "$bytes_received"
		update_conf_out "PacketsSent_${current_associated_devices_stats_index}" "$packets_sent"
		update_conf_out "PacketsReceived_${current_associated_devices_stats_index}" "$packets_received"
		update_conf_out "ErrorsSent_${current_associated_devices_stats_index}" "$errors_sent"
		update_conf_out "RetransCount_${current_associated_devices_stats_index}" "$retrans_count"
		update_conf_out "FailedRetransCount_${current_associated_devices_stats_index}" "$failed_retrans_count"
		update_conf_out "RetryCount_${current_associated_devices_stats_index}" "$retry_count"
		update_conf_out "MultipleRetryCount_${current_associated_devices_stats_index}" "$multiple_retry_count"
		
		current_associated_devices_index=$next_object_index
		next_object_index=$((next_object_index+1))
		current_associated_devices_stats_index=$next_object_index
		next_object_index=$((next_object_index+1))
		associated_count=$((associated_count+1))
	done

	# Update number of associated devices
	update_conf_out "Object_${accesspoint_index}" "$ACCESSPOINT_OBJECT"
	update_conf_out "AssociatedDeviceNumberOfEntries_${accesspoint_index}" "$associated_count"
fi

while read statistics
do
	stats_name=${statistics%_*}
	case $stats_name in
		"Object")
			object_index=${statistics##*_}
			object_index=${object_index%%=*}
			object_name=${statistics##*=}
			update_conf_out "Object_${object_index}" "$object_name"
			;;
		"MACAddress")
			eval mac=\${MACAddress_${object_index}}
			mac=$(printf "%b" "$mac")
			update_conf_out "MACAddress_${object_index}" "$mac"
			;;
		"AuthenticationState")
			update_conf_out "AuthenticationState_${object_index}" "true"
			;;
		"LastDataDownlinkRate")
			downlink_rate_stats
			update_conf_out "LastDataDownlinkRate_${object_index}" "$downlink_rate"
			;;
		"LastDataUplinkRate")
			uplink_rate_stats
			update_conf_out "LastDataUplinkRate_${object_index}" "$uplink_rate"
			;;
		"SignalStrength")
			signal_strength_stats
			update_conf_out "SignalStrength_${object_index}" "$signal_strength"
		"X_LANTIQ_COM_Vendor_SignalStrength2")
			signal_strength_stats
			update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength2_${object_index}" "$signal_strength2"
			;;
		"X_LANTIQ_COM_Vendor_SignalStrength3")
			signal_strength_stats
			update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength3_${object_index}" "$signal_strength3"
			;;
		"X_LANTIQ_COM_Vendor_SignalStrength4")
			signal_strength_stats
			update_conf_out "X_LANTIQ_COM_Vendor_SignalStrength4_${object_index}" "$signal_strength4"
			;;
		"Retransmissions")
			retransmissions_stats
			update_conf_out "Retransmissions_${object_index}" "$retransmissions"
			;;
		"Active")
			update_conf_out "Active_${object_index}" "true"
			;;
		"BytesSent")
			bytes_sent_stats
			update_conf_out "BytesSent_${object_index}" "$bytes_sent"
			;;
		"BytesReceived")
			bytes_received_stats
			update_conf_out "BytesReceived_${object_index}" "$bytes_received"
			;;
		"PacketsSent")
			packets_sent_stats
			update_conf_out "PacketsSent_${object_index}" "$packets_sent"
			;;
		"PacketsReceived")
			packets_received_stats
			update_conf_out "PacketsReceived_${object_index}" "$packets_received"
			;;
		"ErrorsSent")
			errors_sent_stats
			update_conf_out "ErrorsSent_${object_index}" "$errors_sent"
			;;
		"RetransCount")
			retrans_count_stats
			update_conf_out "RetransCount_${object_index}" "$retrans_count"
			;;
		"FailedRetransCount")
			failed_retrans_count_stats
			update_conf_out "FailedRetransCount_${object_index}" "$failed_retrans_count"
			;;
		"RetryCount")
			retry_count_stats
			update_conf_out "RetryCount_${object_index}" "$retry_count"
			;;
		"MultipleRetryCount")
			multiple_retry_count_stats
			update_conf_out "MultipleRetryCount_${object_index}" "$multiple_retry_count"
			;;
		"AssociatedDeviceNumberOfEntries")
			associated_count=0
			for mac in $macs
			do
				associated_count=$((associated_count+1))
			done
			update_conf_out "AssociatedDeviceNumberOfEntries_${object_index}" "$associated_count"
			;;
	esac
done < ${IN_CONF}
# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/assoc_devices_out_conf_${interface_name}

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
