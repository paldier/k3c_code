#!/bin/sh

script_name="wave_wlan_capability"

if [ ! "$LIB_COMMON_SOURCED" ]
then
	if [ -e /tmp/wave_wlan_lib_common.sh ]
	then
		. /tmp/wave_wlan_lib_common.sh
	else
		echo "wave_wlan_capability: Wireless init incomplete. Refresh needed." > /dev/console
		echo "wlanInitIncomplete=\"1\""
		return
	fi
fi

[ ! "$RC_CONF_SOURCED" ] && rc_conf_source
. $ETC_PATH/config.sh

# Define local parameters
local ap_index interface_name
local phy_name iw_frequencies supported_frequencies supported_standards rc_conf_freq capability_aligned max_vaps max_clients_per_vap supported_antennas num_tx_antennas num_rx_antennas fastpath_supported

ap_index=$1
[ -z "$ap_index" ] && print2log 0 ERROR "$script_name is missing the ap index, aborting" && return

timestamp $ap_index "$script_name:$ap_index:begin"
print2log $ap_index DEBUG "$script_name $*"

eval interface_name=\${wlmnwave_${ap_index}_interfaceName}
# Get the phy name in iw for the interface
phy_name=`find_phy_from_interface_name $interface_name`

if [ `lsmod | grep mtlk -c` = 0 ]
then
	echo "wlanInitIncomplete=\"1\""
	return
fi

if [ `check_interface_is_ready $interface_name` = 1 ]
then
	echo "wlanInitIncomplete=\"1\""
	return
fi

# Read iw info for the interface to a file and remove tabs and asterisks
iw $phy_name info > $TEMP_CONF_DIR\iw_info_${phy_name}
sed -i -e 's/\t//g' -e 's/\* //' $TEMP_CONF_DIR\iw_info_${phy_name}

# Return the needed parameters
supported_frequencies=`get_supported_frequencies $TEMP_CONF_DIR\iw_info_${phy_name}`

# Read currently set frequency in rc.conf and if it is different than the supported frequency, print message to console
capability_aligned=1
eval rc_conf_freq=\${wlphy_${ap_index}_freqBand}
if [ "$supported_frequencies" -ne "$FREQ_BOTH" ] && [ "$supported_frequencies" -ne "$rc_conf_freq" ]
then
	capability_aligned=0
fi

case $supported_frequencies in
	$FREQ_24G)
		supported_standards="${MODE_11B},${MODE_11BG},${MODE_11BGN}"
	;;
	$FREQ_5G)
		supported_standards="${MODE_11A},${MODE_11AN},${MODE_11ANAC}"
	;;
	$FREQ_BOTH)
		supported_standards="${MODE_11B},${MODE_11BG},${MODE_11BGN},${MODE_11A},${MODE_11AN},${MODE_11ANAC}"
	;;
esac

max_vaps=`iwpriv $interface_name gAPCapsMaxVAPs`
max_vaps=`echo ${max_vaps##w*:}`
max_clients_per_vap=`iwpriv $interface_name gAPCapsMaxSTAs`
max_clients_per_vap=`echo ${max_clients_per_vap##w*:}`

supported_antennas=`grep "Available Antennas" $TEMP_CONF_DIR\iw_info_${phy_name}`
num_tx_antennas=${supported_antennas##*TX 0x}
num_tx_antennas=${num_tx_antennas:0:1}
num_rx_antennas=${supported_antennas##*x}

fastpath_supported=1
# Fastpath is not supported on Gen4 (the AHB on-board) which can be only wlan0
if [ "$interface_name" = "wlan0" ]
then
	# Read information of physical Wlan interface from wlan_discover output
	. /tmp/wlan_discover.txt

	[ "$AHB_WLAN_COUNT" = "1" ] && fastpath_supported=0
fi
# Fastpath is supported only on GRX350 platforms
[ "$CONFIG_IFX_CONFIG_CPU" != "GRX500" ] && fastpath_supported=0

# Check if driver supports beamforming
beamforming_support=`iwpriv $interface_name gBfExplicitCap`
beamforming_support=`echo ${beamforming_support##w*:}`

rm -f $TEMP_CONF_DIR\iw_info_${phy_name}

echo "capabilityAligned=\"$capability_aligned\""
echo "vendor=\"wave300\""
echo "standard=\"$supported_standards\""
echo "freq=\"$supported_frequencies\""
echo "powerLvl=\"12,25,50,100\""
echo "security=\"3\""
echo "radius=\"1\""
echo "WMM=\"1\""
echo "UAPSD=\"1\""
echo "WPS=\"1\""
#For PIN it is required to list : Label, Display and Keypad (3,4,9). 8 = pbc
echo "WPS_CfgMethods=\"3,4,8,9\""
echo "WDS=\"1\""
echo "WDS_RepCount=\"0\""
echo "maxVAP=\"$max_vaps\""
echo "maxClientsPerVAP=\"$max_clients_per_vap\""
echo "maxWlanClients=\"$max_clients_per_vap\""
echo "macAddrCntrlPerVAP=\"1\""
echo "numMACCntrlEntries=\"$max_clients_per_vap\""
echo "numTxAntenna=\"$num_tx_antennas\""
echo "numRxAntenna=\"$num_rx_antennas\""
echo "wideChanSupport=\"1\""
echo "MCSrange=\"15\""
echo "AMPDUsupport=\"1\""
echo "AMSDUsupport=\"0\""
echo "fastpathSupported=\"$fastpath_supported\""
echo "beamformingSupport=\"$beamforming_support\""

print2log $ap_index DEBUG "$script_name done"
timestamp $ap_index "$script_name:$ap_index:done"
